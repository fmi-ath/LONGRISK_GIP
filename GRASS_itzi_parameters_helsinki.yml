folders:
  # TODO: Replace the specific path settings from sections below with generic paths from this section in the Python code
  # Input
  # Specify the main folder where DEMs are located.
  DEM_files : /data/DEM_2m_HKI

  # Specify the main folder where landcover files are located.
  landcover_files : /data/landcover/Clc2018_FI20m.tif

  # Specify the main folder where imperviousness files are located.
  imperviousness_files : /data/IMD_2018_010m_fi_03035_v020/DATA

  # Path where the rain files are located either ascii format or Tiff format.
  # If they are in ascii format they will be transformed to Tiff format.
  precipitation_files : /data/radar_Copenhagen/2011-07-02/

  # Output
  temporary_files : /tmp/gip/temp
  processed_files : /tmp/gip/datastore
  itzi_output_files : /tmp/gip/itzi

merging:

  # Are there more than one DEM and they have to be merged? True or False
  # If True, provide 'DEM_merge_search_criteria' and 'DEM_file_path_to_merge'
  DEM_merge_boolean : True

  # Specify the main folder where DEMs are located.
  DEM_file_path_to_merge : /data/DEM_2m_HKI

  # Specify the searching criteria for merging the DEMs of interest
  DEM_merge_search_criteria : "L*.tif"

  # Are there more than one landcover file and they have to be merged? True or False.
  # If True, provide 'landcover_file_path_to_merge' and 'landcover_merge_search_criteria'
  landcover_merge_boolean : False

  # Specify the main folder where landcover files are located.
  landcover_file_path_to_merge :

  # Specify the searching criteria for merging the landcover files of interest
  landcover_merge_search_criteria :

  # Are there more than one imperviousness file and they have to be merged? True or False.
  # If True, provide 'imperviousness_file_to_merge' and 'imperviousness_merge_search_criteria'
  imperviousness_merge_boolean : True

  # Specify the main folder where imperviousness files are located.
  imperviousness_file_path_to_merge : "/data/IMD_2018_010m_fi_03035_v020/DATA"

  # Specify the searching criteria for merging the landcover files of interest
  imperviousness_merge_search_criteria : "*N41*.tif *N42*.tif"

cropping:

  # Path of the shapefile to clip/crop the DEM of interest
  shapefile_file_path :

  # Coordinates of region of interest. It has to be closed loop, Ex.: [(x1, y1), (x2, y2), ..., (xn, yn), (x1, y1)]
  x_polygon_coords : "24.943 24.931 24.956 24.956 24.952 24.952 24.943"
  y_polygon_coords : "60.166 60.175 60.175 60.168 60.168 60.167 60.166"

  # Coordinate reference system of the polygon in EPSG format: 4326, 3067, etc.
  polygon_crs : 4326

  # Masking value for the regions outside the given coordinates
  mask_value : -9999.

  # Are there more than one DEM and they have to be cropped? True or False
  DEM_crop_boolean : True

  # If 'DEM_merge_boolean' is False, 'DEM_file_path_to_crop' has to be given
  # Path where DEM is located. If there are many and crop has to be done, specify the main folder.
  DEM_file_path_to_crop :

  # Specify the searching criteria for cropping the DEMs of interest
  DEM_crop_search_criteria :

  # Want to crop the landcover file same as DEM file? True or False.
  landcover_crop_boolean : True

  # If 'landcover_merge_boolean' is False, this parameter has to be given
  # Path where landcover file is located. If there are many and crop has to be done, specify the main folder.
  landcover_file_path_to_crop : /data/landcover/Clc2018_FI20m.tif

  # Specify the searching criteria for cropping the landcover files of interest
  landcover_crop_search_criteria :

  # Want to crop the imperviousness file same as landcover and DEM files? True or False.
  imperviousness_crop_boolean : True

  # If 'imperviousness_merge_boolean' is False, this parameter has to be given
  # Path where imperviousness file is located. If there are many and crop has to be done, specify the main folder.
  imperviousness_file_path_to_crop :

  # Specify the searching criteria for cropping the landcover files of interest
  imperviousness_crop_search_criteria :

imperviousness:
  # Is there imperviousness map to complement landcover file?
  imperviousness_file_boolean : True

rain:
  # Path where the rain files are located either ascii format or Tiff format. If they are in ascii format
  # they will be transformed to Tiff format.
  ascii_files_path : /data/radar_Copenhagen/2011-07-02/
  GTiff_files_path :

  # Specify the searching criteria for ascii files of interest to convert
  ascii_search_criteria : "*.txt"

  # Let's now define the projection of the Tiff file when transforming by specifying the upper left corner of the image
  # in a given coordinate system
  x_min : 380000
  y_max : 6678000
  EPSG_code : 3067
  # Additional parameres for the transformation
  x_rotation : 0
  y_rotation : 0
  # For resolution purposes, user can provide either the resolution or x_max and y_min and the program calculates it
  x_max :
  y_min :
  # x-y_resolution in meters
  x_res : 500
  y_res : 500

  # In case we want to relocate a specific rain region on top of a specific region. If this is True,
  # the user must provide the relative position of the rain region with respect to the center of the image (radar location)
  # and the coordinates of the specific region in which the rain is to be relocated
  rain_relocation : True
  # Coordinates of region of interest
  X_target : 385333.03
  Y_target : 6672806.88
  # Relative distance between radar and rain (in meters)
  X_radar_rain : 9000
  Y_radar_rain : 36500
  # Specify the Tif files searching criteria for relocating
  relocation_search_criteria : "*.tif"

  # If rain_relocation is False, provide the searching criteria for cropping rain rasters
  rain_crop_search_criteria : "*.tif"

  # Want to crop the rain file same as DEM files? True or False.
  rain_crop_boolean : True

  # Does infiltration has to be calculated as space time raster dataset from rain measurements?
  infiltration_rate : True

  # Does one want to set up constant rainfield. In this case ASCII and GTiff rain files are neglected.
  constant : True
  ## In units mm/h
  intensity_constant : 100.0

grass_info:

  # Path to the grass binary
  grass_bin_path : /usr/bin/grass
  # Path to the GIS DataBase
  grass_db : /tmp/gip/grassdata
  # name of the location
  location : FINLAND
  # name of the mapset
  mapset : Helsinki
  # name of the region definition
  region :
  # name of raster map to be used as a mask
  mask :
  # EPSG code for intializing the GRASS session
  CRS : 3067

grass_time:
  # Start of the simulation. Format yyyy-mm-dd HH:MM
  start_time : 2011-07-02 17:00
  # End of the simulation. Format yyyy-mm-dd HH:MM
  end_time : 2011-07-02 17:15
  # Time increment for creating the .txt file for registering rain files. Ex: data taken minutely
  increment_number : 1
  increment_unit : minutes
  # Duration of the simulation. Format HH:MM:SS
  duration :
  # Duration between two records. Format HH:MM:SS
  record_step : 00:01:00

grass_input:
  # elevation (raster map/stds)
  dem :
  # friction coefficient (raster map/stds)
  friction :
  # starting water depth (raster map)
  start_h :
  # starting water surface elevation (raster map)
  start_y :
  # inlfitration (raster)
  infiltration :
  # losees (raster)
  losses :

  # Input user flow in m/s (raster map/stds)
  inflow :
  # Input boundary conditions type (raster map/stds)
  bctype :
  # Input boundary conditions values (raster map/stds)
  bcval :

grass_output:
  # prefix of output strds
  prefix: helsinkivakio3
  # strds to be saved, separated by comma
  values : h
  #h, wse, v, vdir, qx, qy, boundaries, infiltration, rainfall, inflow, losses, drainage_stats, verror

grass_statistics:
  # statistic file
  stats_file :

grass_options:
  # Water depth threshold in metres
  hmin : 0.005
  # Slope threshold in m/m
  slmax : 0.1
  # CFL coefficient used to calculate time-step
  cfl : 0.7
  # Inertia weighting coefficient
  theta : 0.9
  # Rain routing velocity in m/s
  vrouting : 0.1
  # Maximum superficial flow time-step in seconds
  dtmax : .5
  # Infiltration time-step in seconds
  dtinf : 60

water:
  # These are used unless start_h is specified
  # constant, limited, floodfill
  method:
  # How much water will be added, in meters (for constant and limited methods)
  depth: 0.38
  # if constant, these don't matter
  # if limited, give either elevation or point
  # flood-fill requires reference point
  # note that base level is not at mean sea level in N2000 system
  # x and y should be in DEM projection coordinates
  elevation: 0.39
  x: 15
  y: 213
  # Value that is added to the points on collected by the floodfill method
  addon: 0.1